<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication 
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:mx="library://ns.adobe.com/flex/mx"
    showStatusBar="false">
    
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    
    <fx:Script>
        <![CDATA[
            import com.adobe.crypto.MD5;
            
            
            private const PROTOCOL_ID:uint = uint("0x" + MD5.hash("UDPChat!!!!").substr(0, 8).toUpperCase());
            
            private var sockets:Vector.<DatagramSocket>;
            
            private var socket:DatagramSocket;
            
            private var targetIp:String;
            private var targetPort:int = 54321;
            
            private var localIp:String;
            private var localPort:int = 54321;
                        
            private function doConnect():void
            {
                socket = new DatagramSocket();
                socket.addEventListener(DatagramSocketDataEvent.DATA, onData);
                socket.bind(localPort, localIp);
                socket.receive();
                
                doSend("**Connected**");
            }
            
            private function findInterfaces():void
            {
                sockets = new Vector.<DatagramSocket>();
                var netInterfaces:Vector.<NetworkInterface> = NetworkInfo.networkInfo.findInterfaces();
                if (netInterfaces && netInterfaces.length > 0) 
                {    
                    for each (var i:NetworkInterface in netInterfaces) 
                    {
                        if (i.active) 
                        {
                            var addresses:Vector.<InterfaceAddress> = i.addresses;
                            for each (var j:InterfaceAddress in addresses) 
                            {
                                trace("- Host : " + j.address);
                                var s:DatagramSocket = new DatagramSocket();
                                s.addEventListener(DatagramSocketDataEvent.DATA, onSocketSetup);
                                s.bind(localPort, j.address);
                                sockets.push(s);
                            }
                        }
                    }
                }
            }
            
            private function onSocketSetup(e:DatagramSocketDataEvent):void
            {
                if (e.data.bytesAvailable > 4)
                {
                    var proto:uint = e.data.readUnsignedInt();
                    if (proto == PROTOCOL_ID)
                    {
                        trace("CONNECTION FROM (" + e.srcAddress + ": " + e.srcPort));
                    }
                }
                
            }
            
            private function doSend(msg:String):void
            {
                var data:ByteArray = new ByteArray();
                data.writeUTFBytes(msg);
                socket.send(data, 0, 0, targetIp, targetPort);
            }
            
            private function onConnectClick(e:MouseEvent):void
            {
                targetIp = otherIp.text;
//                localIp = thisIp.text;
                doConnect();
            }
            
            private function onHostClick(e:MouseEvent):void
            {
                findInterfaces();
            }
            
            private function addMessage(msg:String):void
            {
                chatLog.text += msg + "\n";
            }
            
            private function onData(e:DatagramSocketDataEvent):void
            {
                addMessage("Them (" + e.srcAddress + ": " + e.srcPort + "): " + e.data.readUTFBytes(e.data.bytesAvailable));
            }
            
            private function onSend(s:MouseEvent):void
            {
                addMessage("Me: " + chatMsg.text);
                doSend(chatMsg.text);
                chatMsg.text = '';
            }
            
            private function onEnter():void
            {
                if (chatMsg.text.length > 0)
                {
                    onSend(null);
                }
            }
             
        ]]>
    </fx:Script>
    
    <s:layout>
        <s:VerticalLayout
            gap="12"
            paddingTop="12"
            paddingRight="12"
            paddingBottom="12"
            paddingLeft="12"/>
    </s:layout>
    
    <s:states>
        
        <s:State name="init"/>
        <s:State name="chat"/>
                
    </s:states>
    
    <s:Group
        includeIn="init"
        percentWidth="100"
        percentHeight="100">
        
        <s:layout>
            <s:VerticalLayout
                gap="12"
                horizontalAlign="center"
                verticalAlign="middle"/>
        </s:layout>
        
        <s:Label
            text="Connect To"/>
        
        <s:TextInput
            id="otherIp"/>
        
        <s:Button
            id="connect"
            label="Connect"
            click="onConnectClick(event)"/>
        
        <mx:HRule
            percentWidth="100"/>
        
        <s:Button
            id="host"
            label="Host"
            click="onHostClick(event)"/>
        
    </s:Group>
    
    <s:VGroup
        includeIn="chat"
        percentWidth="100"
        percentHeight="100">
        
        <s:Label
            text="Chat Log"/>
        
        <s:TextArea
            id="chatLog"
            width="100%"
            height="200"/>
        
        <s:Label
            text="Send This"/>
        
        <s:TextInput
            id="chatMsg"
            width="100%"
            enter="onEnter()"/>
        
        <s:Button
            id="send"
            label="Send"
            width="100%"
            click="onSend(event)"
            enabled="{chatMsg.text.length > 0}"/>
        
    </s:VGroup>
    
</s:WindowedApplication>
